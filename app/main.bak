# main.py
# Main entry point for the RapidRide QML application
# Exposes Python backend and page controller to QML

import os
import sys
from network import NetworkManager
from PySide6.QtWidgets import QApplication, QMainWindow
from PySide6.QtPdf import QPdfDocument
from PySide6.QtPdfWidgets import QPdfView
from PySide6.QtQml import QQmlApplicationEngine
from PySide6.QtCore import QObject, Slot, QUrl, Signal, Property, QCoreApplication
from PySide6.QtGui import QDesktopServices, QGuiApplication, QPalette, QColor
from theme_manager import ThemeManager


class PdfViewer(QMainWindow):
    def __init__(self, pdf_path):
        super().__init__()
        self.setWindowTitle("PDF Viewer")

        self.pdf_document = QPdfDocument(self)
        self.pdf_document.load(pdf_path)

        self.pdf_view = QPdfView(self)
        self.pdf_view.setDocument(self.pdf_document)

        self.setCentralWidget(self.pdf_view)
        self.resize(800, 600)

class ThemeController(QObject):
    themeChanged = Signal()

    def __init__(self):
        super().__init__()
        self._theme_manager = ThemeManager()
        self._current_theme = self._theme_manager.get_theme()
        self._theme_data = self._theme_manager.get_theme_data()

    @Slot(str)
    def setTheme(self, name):
        self._theme_manager.set_theme(name)
        self._current_theme = name
        self._theme_data = self._theme_manager.get_theme_data()
        self.applyPalette(name)
        self.themeChanged.emit()

    @Property(str, notify=themeChanged)
    def available_themes(self):
        return self._theme_manager.available_themes()

    @Property(str, notify=themeChanged)
    def currentTheme(self):
        return self._current_theme

    @Property(str, notify=themeChanged)
    def background(self):
        return self._theme_data.get("background", "#000000")

    @Property(str, notify=themeChanged)
    def text(self):
        return self._theme_data.get("text", "#ffffff")

    @Property(str, notify=themeChanged)
    def accent(self):
        return self._theme_data.get("accent", "#f5721b")

    @Property(str, notify=themeChanged)
    def border(self):
        return self._theme_data.get("border", "#f5721b")

    @Property(str, notify=themeChanged)
    def buttonBackground(self):
        return self._theme_data.get("buttonBackground", "#1e1e1e")

    @Property(str, notify=themeChanged)
    def buttonText(self):
        return self._theme_data.get("buttonText", "#ffffff")

    @Property(str, notify=themeChanged)
    def toolTipBase(self):
        return self._theme_data.get("toolTipBase", "#2c2c2c")

    @Property(str, notify=themeChanged)
    def toolTipText(self):
        return self._theme_data.get("toolTipText", "#ffffff")

    @Property(str, notify=themeChanged)
    def highlight(self):
        return self._theme_data.get("highlight", "#f5721b")

    @Property(str, notify=themeChanged)
    def highlightedText(self):
        return self._theme_data.get("highlightedText", "#000000")

    @Property(str, notify=themeChanged)
    def placeholder(self):
        return self._theme_data.get("placeholder", "#888888")

    @Property(str, notify=themeChanged)
    def link(self):
        return self._theme_data.get("link", "#268bd2")

    def applyPalette(self, theme):
        palette = QPalette()
        colors = self._theme_data

        palette.setColor(QPalette.Window, QColor(colors.get("background", "#000000")))
        palette.setColor(QPalette.WindowText, QColor(colors.get("text", "#ffffff")))
        palette.setColor(QPalette.Base, QColor(colors.get("background", "#000000")))
        palette.setColor(QPalette.AlternateBase, QColor(colors.get("background", "#000000")))
        palette.setColor(QPalette.ToolTipBase, QColor(colors.get("toolTipBase", "#2c2c2c")))
        palette.setColor(QPalette.ToolTipText, QColor(colors.get("toolTipText", "#ffffff")))
        palette.setColor(QPalette.Text, QColor(colors.get("text", "#ffffff")))
        palette.setColor(QPalette.Button, QColor(colors.get("buttonBackground", "#1e1e1e")))
        palette.setColor(QPalette.ButtonText, QColor(colors.get("buttonText", "#ffffff")))
        palette.setColor(QPalette.BrightText, QColor("#ff0000"))
        palette.setColor(QPalette.Highlight, QColor(colors.get("highlight", "#f5721b")))
        palette.setColor(QPalette.HighlightedText, QColor(colors.get("highlightedText", "#000000")))
        palette.setColor(QPalette.PlaceholderText, QColor(colors.get("placeholder", "#888888")))
        palette.setColor(QPalette.Link, QColor(colors.get("link", "#268bd2")))

        QGuiApplication.setPalette(palette)

class Controller(QObject):
    """Handles navigation between QML pages using a Loader"""

    def __init__(self, loader):
        super().__init__()
        self.loader = loader

    @Slot(str)
    def loadPage(self, page):
        print(f"[Controller] Switching to page: {page}")
        self.loader.setProperty("source", page)


class AppBackend(QObject):
    """Exposes Python-side functionality like viewing PDFs, ticket management"""

    def __init__(self):
        super().__init__()
        self._windows = []

    @Slot(str)
    def open_pdf_viewer(self, fname):
        """Opens the requested PDF in an external viewer"""
        pdf_path = f"assets/routes/{fname}-map2025.pdf"
        viewer = PdfViewer(pdf_path)
        viewer.show()
        self._windows.append(viewer)

    @Slot(str)
    def purchase_ticket(self, ticket_type):
        print(f"[Backend] Requested ticket: {ticket_type}")
        # Future: call HTTP API or show purchase QML screen


if __name__ == "__main__":
    QCoreApplication.setOrganizationName("RapidRide")
    QCoreApplication.setApplicationName("RTS Client")
    app = QApplication(sys.argv)
    engine = QQmlApplicationEngine()
    theme_controller = ThemeController()
    theme_controller.applyPalette(theme_controller.currentTheme)
    engine.rootContext().setContextProperty("ThemeController", theme_controller)
    engine.rootContext().setContextProperty("ThemeManager", theme_controller)
    engine.rootContext().setContextProperty("Theme", theme_controller)
    engine.rootContext().setContextProperty("ThemeList", theme_controller.available_themes)

    # Load main QML
    engine.load("main.qml")
    if not engine.rootObjects():
        sys.exit(-1)

    # Grab Loader from QML
    root = engine.rootObjects()[0]
    loader = root.findChild(QObject, "pageLoader")
    network = NetworkManager("http://127.0.0.1:8000")
    backend = AppBackend()
    controller = Controller(loader)
    engine.rootContext().setContextProperty("controller", controller)
    engine.rootContext().setContextProperty("backend", backend)
    engine.rootContext().setContextProperty("Network", network)
    # Startup Page
    initial_page = "home.qml" if network.isLoggedIn() else "login.qml"
    loader.setProperty("source", initial_page)
    if loader is None:
        print("[Error] Loader with objectName 'pageLoader' not found.")
        sys.exit(-1)

    # Create and expose Controller and Backend

    sys.exit(app.exec())
