import json
import base64
import logging
from pathlib import Path
from datetime import datetime
from PySide6.QtCore import QObject, Signal, Slot, QStandardPaths
from cryptography.hazmat.primitives.asymmetric.ed25519 import Ed25519PublicKey

class WalletStore(QObject):
    """
    Persistent wallet storage with ticket validation and debug logging.
    Stores tickets in wallet.json under AppDataLocation.
    Loads ED25519 public key from ConfigLocation/public_key.pem to validate payloads.
    Signals:
      - walletLoaded(list): emitted after initial load
      - walletUpdated(list): emitted after add/clear
    """
    walletLoaded = Signal(list)
    walletUpdated = Signal(list)

    def __init__(self):
        super().__init__()
        self.logger = logging.getLogger("rts.client.walletstore")
        self.logger.debug("Initializing WalletStore")

        # Determine storage paths
        data_dir = QStandardPaths.writableLocation(QStandardPaths.AppDataLocation)
        cfg_dir  = QStandardPaths.writableLocation(QStandardPaths.ConfigLocation)
        self._file = Path(data_dir) / "wallet.json"
        Path(data_dir).mkdir(parents=True, exist_ok=True)
        self.logger.debug("Data directory: %s, Config directory: %s", data_dir, cfg_dir)

        # Load public key for ED25519 validation
        pubkey_path = Path(cfg_dir) / "public_key.pem"
        if not pubkey_path.exists():
            self.logger.error("Missing public key at %s", pubkey_path)
            raise FileNotFoundError(f"Missing public key: {pubkey_path}")
        raw_key = pubkey_path.read_bytes()
        self._pubkey = Ed25519PublicKey.from_public_bytes(raw_key)
        self.logger.debug("Loaded ED25519 public key")

        # Internal ticket list
        self._tickets = []
        self.load()

    def load(self):
        """Load wallet.json, validate each payload, emit walletLoaded."""
        self.logger.debug("Loading wallet from %s", self._file)
        if self._file.exists():
            data = json.loads(self._file.read_text())
            valid = []
            for ticket in data:
                payload = ticket.get("payload", "")
                if self.validateTicket(payload):
                    valid.append(ticket)
                else:
                    self.logger.warning("Invalid ticket dropped: %s...", payload[:10])
            self._tickets = valid
        else:
            self.logger.debug("Wallet file does not exist, starting empty")
            self._tickets = []
        self.walletLoaded.emit(self._tickets)
        self.logger.debug("Emitted walletLoaded with %d tickets", len(self._tickets))

    def save(self):
        """Write current tickets to disk and emit walletUpdated."""
        self.logger.debug("Saving %d tickets to %s", len(self._tickets), self._file)
        self._file.write_text(json.dumps(self._tickets, indent=2))
        self.walletUpdated.emit(self._tickets)
        self.logger.debug("Emitted walletUpdated")

    def validateTicket(self, payload: str) -> bool:
        """
        Verify ED25519 signature appended to payload bytes.
        Assumes payload is base64(message||signature).
        """
        try:
            blob = base64.b64decode(payload)
            msg, sig = blob[:-64], blob[-64:]
            self._pubkey.verify(sig, msg)
            return True
        except Exception as e:
            self.logger.debug("validateTicket failed: %s", e)
            return False

    @Slot(str, str)
    def addTicket(self, payload: str, ticket_type: str):
        """Validate and append a new ticket."""
        self.logger.debug("Adding ticket of type %s", ticket_type)
        if not self.validateTicket(payload):
            self.logger.error("Payload failed validation, not adding")
            return
        ticket = {
            "payload": payload,
            "type": ticket_type,
        }
        self._tickets.append(ticket)
        self.save()

    @Slot(int)
    def deleteTicket(self, index: int):
        """Remove a ticket by its index in the list and save"""
        if 0 <= index < len(self._tickets):
            self.logger.debug(f"Deleting ticket at index {index}")
            del self._tickets[index]
            self.save()
        else:
            self.logger.warning(f"deleteTicket called with invalid index {index}")

    @Slot()
    def clearWallet(self):
        """Remove all tickets and delete the storage file."""
        self.logger.debug("Clearing wallet and deleting file %s", self._file)
        self._tickets = []
        if self._file.exists():
            self._file.unlink()
        self.walletUpdated.emit(self._tickets)

    @Slot(result=list)
    def getTickets(self) -> list:
        """Return current in-memory ticket list."""
        self.logger.debug("getTickets called, returning %d tickets", len(self._tickets))
        return self._tickets

