// register.qml â€” user registration with popup alerts
import QtQuick 2.15
import QtQuick.Controls 2.15
import QtQuick.Layouts 1.15

Rectangle {
    id: root
    color: Theme.background
    anchors.fill: parent

    ColumnLayout {
        anchors.centerIn: parent
        spacing: 16
        width: parent.width * 0.8

        Label {
            text: "Create Account"
            font.pixelSize: 22
            color: Theme.text
            horizontalAlignment: Text.AlignHCenter
            Layout.fillWidth: true
        }

        TextField {
            id: usernameField
            placeholderText: "Username"
            font.pixelSize: 16
            Layout.fillWidth: true
        }

        TextField {
            id: emailField
            placeholderText: "Email"
            font.pixelSize: 16
            Layout.fillWidth: true
        }

        TextField {
            id: passwordField
            placeholderText: "Password"
            echoMode: TextInput.Password
            font.pixelSize: 16
            Layout.fillWidth: true
        }

        Button {
            text: "Register"
            Layout.fillWidth: true
            onClicked: {
                if (!usernameField.text || !passwordField.text) {
                    errorPopup.text = "Username and password are required."
                    errorPopup.open()
                } else {
                    Network.registerUser(
                        usernameField.text,
                        emailField.text,
                        passwordField.text
                    )
                }
            }
        }

        Button {
            text: "Already have an account? Log in"
            Layout.fillWidth: true
            onClicked: controller.loadPage("login.qml")
        }
    }

    // Error Popup
    Popup {
        id: errorPopup
        modal: true
        width: parent.width * 0.8
        height: 120
        focus: true
        closePolicy: Popup.CloseOnEscape | Popup.CloseOnPressOutside

        property alias text: errorText.text

        background: Rectangle {
            color: Theme.surface
            border.color: Theme.accent
            radius: 10
        }

        ColumnLayout {
            anchors.fill: parent
            anchors.margins: 16
            spacing: 12

            Label {
                id: errorText
                color: Theme.text
                wrapMode: Text.Wrap
                Layout.fillWidth: true
            }

            Button {
                text: "OK"
                Layout.alignment: Qt.AlignRight
                onClicked: errorPopup.close()
            }
        }
    }

    // Success Handler
    Connections {
        target: Network
        onErrorOccurred: function(message) {
            errorPopup.text = message
            errorPopup.open()
        }
    }
}

